// Code generated by mockery v2.43.0. DO NOT EDIT.

package interfaces

import (
	context "context"

	ent "github.com/leeliwei930/walletassignment/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetFullName provides a mock function with given fields: ctx, userRec
func (_m *MockUserService) GetFullName(ctx context.Context, userRec *ent.User) string {
	ret := _m.Called(ctx, userRec)

	if len(ret) == 0 {
		panic("no return value specified for GetFullName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *ent.User) string); ok {
		r0 = rf(ctx, userRec)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserService_GetFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullName'
type MockUserService_GetFullName_Call struct {
	*mock.Call
}

// GetFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - userRec *ent.User
func (_e *MockUserService_Expecter) GetFullName(ctx interface{}, userRec interface{}) *MockUserService_GetFullName_Call {
	return &MockUserService_GetFullName_Call{Call: _e.mock.On("GetFullName", ctx, userRec)}
}

func (_c *MockUserService_GetFullName_Call) Run(run func(ctx context.Context, userRec *ent.User)) *MockUserService_GetFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.User))
	})
	return _c
}

func (_c *MockUserService_GetFullName_Call) Return(_a0 string) *MockUserService_GetFullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetFullName_Call) RunAndReturn(run func(context.Context, *ent.User) string) *MockUserService_GetFullName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *MockUserService) GetUserByID(ctx context.Context, userID uuid.UUID) (*ent.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockUserService_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(_a0 *ent.User, _a1 error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIDByPhone provides a mock function with given fields: ctx, phone
func (_m *MockUserService) GetUserIDByPhone(ctx context.Context, phone string) (uuid.UUID, error) {
	ret := _m.Called(ctx, phone)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByPhone")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, phone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserIDByPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIDByPhone'
type MockUserService_GetUserIDByPhone_Call struct {
	*mock.Call
}

// GetUserIDByPhone is a helper method to define mock.On call
//   - ctx context.Context
//   - phone string
func (_e *MockUserService_Expecter) GetUserIDByPhone(ctx interface{}, phone interface{}) *MockUserService_GetUserIDByPhone_Call {
	return &MockUserService_GetUserIDByPhone_Call{Call: _e.mock.On("GetUserIDByPhone", ctx, phone)}
}

func (_c *MockUserService_GetUserIDByPhone_Call) Run(run func(ctx context.Context, phone string)) *MockUserService_GetUserIDByPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserIDByPhone_Call) Return(_a0 uuid.UUID, _a1 error) *MockUserService_GetUserIDByPhone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserIDByPhone_Call) RunAndReturn(run func(context.Context, string) (uuid.UUID, error)) *MockUserService_GetUserIDByPhone_Call {
	_c.Call.Return(run)
	return _c
}

// SetupUser provides a mock function with given fields: ctx, phone, firstName, lastName
func (_m *MockUserService) SetupUser(ctx context.Context, phone string, firstName string, lastName string) (*ent.User, error) {
	ret := _m.Called(ctx, phone, firstName, lastName)

	if len(ret) == 0 {
		panic("no return value specified for SetupUser")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*ent.User, error)); ok {
		return rf(ctx, phone, firstName, lastName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *ent.User); ok {
		r0 = rf(ctx, phone, firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, phone, firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_SetupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupUser'
type MockUserService_SetupUser_Call struct {
	*mock.Call
}

// SetupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - phone string
//   - firstName string
//   - lastName string
func (_e *MockUserService_Expecter) SetupUser(ctx interface{}, phone interface{}, firstName interface{}, lastName interface{}) *MockUserService_SetupUser_Call {
	return &MockUserService_SetupUser_Call{Call: _e.mock.On("SetupUser", ctx, phone, firstName, lastName)}
}

func (_c *MockUserService_SetupUser_Call) Run(run func(ctx context.Context, phone string, firstName string, lastName string)) *MockUserService_SetupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_SetupUser_Call) Return(_a0 *ent.User, _a1 error) *MockUserService_SetupUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_SetupUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*ent.User, error)) *MockUserService_SetupUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
