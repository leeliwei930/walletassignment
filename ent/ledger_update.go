// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/leeliwei930/walletassignment/ent/ledger"
	"github.com/leeliwei930/walletassignment/ent/predicate"
	"github.com/leeliwei930/walletassignment/ent/wallet"
)

// LedgerUpdate is the builder for updating Ledger entities.
type LedgerUpdate struct {
	config
	hooks    []Hook
	mutation *LedgerMutation
}

// Where appends a list predicates to the LedgerUpdate builder.
func (lu *LedgerUpdate) Where(ps ...predicate.Ledger) *LedgerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetWalletID sets the "wallet_id" field.
func (lu *LedgerUpdate) SetWalletID(u uuid.UUID) *LedgerUpdate {
	lu.mutation.SetWalletID(u)
	return lu
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableWalletID(u *uuid.UUID) *LedgerUpdate {
	if u != nil {
		lu.SetWalletID(*u)
	}
	return lu
}

// SetAmount sets the "amount" field.
func (lu *LedgerUpdate) SetAmount(i int) *LedgerUpdate {
	lu.mutation.ResetAmount()
	lu.mutation.SetAmount(i)
	return lu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableAmount(i *int) *LedgerUpdate {
	if i != nil {
		lu.SetAmount(*i)
	}
	return lu
}

// AddAmount adds i to the "amount" field.
func (lu *LedgerUpdate) AddAmount(i int) *LedgerUpdate {
	lu.mutation.AddAmount(i)
	return lu
}

// SetDescription sets the "description" field.
func (lu *LedgerUpdate) SetDescription(s string) *LedgerUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableDescription(s *string) *LedgerUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// SetRecipientReferenceNote sets the "recipient_reference_note" field.
func (lu *LedgerUpdate) SetRecipientReferenceNote(s string) *LedgerUpdate {
	lu.mutation.SetRecipientReferenceNote(s)
	return lu
}

// SetNillableRecipientReferenceNote sets the "recipient_reference_note" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableRecipientReferenceNote(s *string) *LedgerUpdate {
	if s != nil {
		lu.SetRecipientReferenceNote(*s)
	}
	return lu
}

// ClearRecipientReferenceNote clears the value of the "recipient_reference_note" field.
func (lu *LedgerUpdate) ClearRecipientReferenceNote() *LedgerUpdate {
	lu.mutation.ClearRecipientReferenceNote()
	return lu
}

// SetTransactionType sets the "transaction_type" field.
func (lu *LedgerUpdate) SetTransactionType(s string) *LedgerUpdate {
	lu.mutation.SetTransactionType(s)
	return lu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableTransactionType(s *string) *LedgerUpdate {
	if s != nil {
		lu.SetTransactionType(*s)
	}
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LedgerUpdate) SetCreatedAt(t time.Time) *LedgerUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableCreatedAt(t *time.Time) *LedgerUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LedgerUpdate) SetUpdatedAt(t time.Time) *LedgerUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (lu *LedgerUpdate) SetWallet(w *Wallet) *LedgerUpdate {
	return lu.SetWalletID(w.ID)
}

// Mutation returns the LedgerMutation object of the builder.
func (lu *LedgerUpdate) Mutation() *LedgerMutation {
	return lu.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (lu *LedgerUpdate) ClearWallet() *LedgerUpdate {
	lu.mutation.ClearWallet()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LedgerUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LedgerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LedgerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LedgerUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LedgerUpdate) check() error {
	if v, ok := lu.mutation.Amount(); ok {
		if err := ledger.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Ledger.amount": %w`, err)}
		}
	}
	if lu.mutation.WalletCleared() && len(lu.mutation.WalletIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ledger.wallet"`)
	}
	return nil
}

func (lu *LedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Amount(); ok {
		_spec.SetField(ledger.FieldAmount, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedAmount(); ok {
		_spec.AddField(ledger.FieldAmount, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(ledger.FieldDescription, field.TypeString, value)
	}
	if value, ok := lu.mutation.RecipientReferenceNote(); ok {
		_spec.SetField(ledger.FieldRecipientReferenceNote, field.TypeString, value)
	}
	if lu.mutation.RecipientReferenceNoteCleared() {
		_spec.ClearField(ledger.FieldRecipientReferenceNote, field.TypeString)
	}
	if value, ok := lu.mutation.TransactionType(); ok {
		_spec.SetField(ledger.FieldTransactionType, field.TypeString, value)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if lu.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ledger.WalletTable,
			Columns: []string{ledger.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ledger.WalletTable,
			Columns: []string{ledger.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LedgerUpdateOne is the builder for updating a single Ledger entity.
type LedgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LedgerMutation
}

// SetWalletID sets the "wallet_id" field.
func (luo *LedgerUpdateOne) SetWalletID(u uuid.UUID) *LedgerUpdateOne {
	luo.mutation.SetWalletID(u)
	return luo
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableWalletID(u *uuid.UUID) *LedgerUpdateOne {
	if u != nil {
		luo.SetWalletID(*u)
	}
	return luo
}

// SetAmount sets the "amount" field.
func (luo *LedgerUpdateOne) SetAmount(i int) *LedgerUpdateOne {
	luo.mutation.ResetAmount()
	luo.mutation.SetAmount(i)
	return luo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableAmount(i *int) *LedgerUpdateOne {
	if i != nil {
		luo.SetAmount(*i)
	}
	return luo
}

// AddAmount adds i to the "amount" field.
func (luo *LedgerUpdateOne) AddAmount(i int) *LedgerUpdateOne {
	luo.mutation.AddAmount(i)
	return luo
}

// SetDescription sets the "description" field.
func (luo *LedgerUpdateOne) SetDescription(s string) *LedgerUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableDescription(s *string) *LedgerUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// SetRecipientReferenceNote sets the "recipient_reference_note" field.
func (luo *LedgerUpdateOne) SetRecipientReferenceNote(s string) *LedgerUpdateOne {
	luo.mutation.SetRecipientReferenceNote(s)
	return luo
}

// SetNillableRecipientReferenceNote sets the "recipient_reference_note" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableRecipientReferenceNote(s *string) *LedgerUpdateOne {
	if s != nil {
		luo.SetRecipientReferenceNote(*s)
	}
	return luo
}

// ClearRecipientReferenceNote clears the value of the "recipient_reference_note" field.
func (luo *LedgerUpdateOne) ClearRecipientReferenceNote() *LedgerUpdateOne {
	luo.mutation.ClearRecipientReferenceNote()
	return luo
}

// SetTransactionType sets the "transaction_type" field.
func (luo *LedgerUpdateOne) SetTransactionType(s string) *LedgerUpdateOne {
	luo.mutation.SetTransactionType(s)
	return luo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableTransactionType(s *string) *LedgerUpdateOne {
	if s != nil {
		luo.SetTransactionType(*s)
	}
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LedgerUpdateOne) SetCreatedAt(t time.Time) *LedgerUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableCreatedAt(t *time.Time) *LedgerUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LedgerUpdateOne) SetUpdatedAt(t time.Time) *LedgerUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (luo *LedgerUpdateOne) SetWallet(w *Wallet) *LedgerUpdateOne {
	return luo.SetWalletID(w.ID)
}

// Mutation returns the LedgerMutation object of the builder.
func (luo *LedgerUpdateOne) Mutation() *LedgerMutation {
	return luo.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (luo *LedgerUpdateOne) ClearWallet() *LedgerUpdateOne {
	luo.mutation.ClearWallet()
	return luo
}

// Where appends a list predicates to the LedgerUpdate builder.
func (luo *LedgerUpdateOne) Where(ps ...predicate.Ledger) *LedgerUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LedgerUpdateOne) Select(field string, fields ...string) *LedgerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Ledger entity.
func (luo *LedgerUpdateOne) Save(ctx context.Context) (*Ledger, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LedgerUpdateOne) SaveX(ctx context.Context) *Ledger {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LedgerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LedgerUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LedgerUpdateOne) check() error {
	if v, ok := luo.mutation.Amount(); ok {
		if err := ledger.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Ledger.amount": %w`, err)}
		}
	}
	if luo.mutation.WalletCleared() && len(luo.mutation.WalletIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ledger.wallet"`)
	}
	return nil
}

func (luo *LedgerUpdateOne) sqlSave(ctx context.Context) (_node *Ledger, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ledger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ledger.FieldID)
		for _, f := range fields {
			if !ledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Amount(); ok {
		_spec.SetField(ledger.FieldAmount, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedAmount(); ok {
		_spec.AddField(ledger.FieldAmount, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(ledger.FieldDescription, field.TypeString, value)
	}
	if value, ok := luo.mutation.RecipientReferenceNote(); ok {
		_spec.SetField(ledger.FieldRecipientReferenceNote, field.TypeString, value)
	}
	if luo.mutation.RecipientReferenceNoteCleared() {
		_spec.ClearField(ledger.FieldRecipientReferenceNote, field.TypeString)
	}
	if value, ok := luo.mutation.TransactionType(); ok {
		_spec.SetField(ledger.FieldTransactionType, field.TypeString, value)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if luo.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ledger.WalletTable,
			Columns: []string{ledger.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ledger.WalletTable,
			Columns: []string{ledger.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ledger{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
