// Code generated by ent, DO NOT EDIT.

package ledger

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/leeliwei930/walletassignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldID, id))
}

// WalletID applies equality check predicate on the "wallet_id" field. It's identical to WalletIDEQ.
func WalletID(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldWalletID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldAmount, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldDescription, v))
}

// RecipientReferenceNote applies equality check predicate on the "recipient_reference_note" field. It's identical to RecipientReferenceNoteEQ.
func RecipientReferenceNote(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldRecipientReferenceNote, v))
}

// TransactionType applies equality check predicate on the "transaction_type" field. It's identical to TransactionTypeEQ.
func TransactionType(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldTransactionType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// WalletIDEQ applies the EQ predicate on the "wallet_id" field.
func WalletIDEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldWalletID, v))
}

// WalletIDNEQ applies the NEQ predicate on the "wallet_id" field.
func WalletIDNEQ(v uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldWalletID, v))
}

// WalletIDIn applies the In predicate on the "wallet_id" field.
func WalletIDIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldWalletID, vs...))
}

// WalletIDNotIn applies the NotIn predicate on the "wallet_id" field.
func WalletIDNotIn(vs ...uuid.UUID) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldWalletID, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldAmount, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldDescription, v))
}

// RecipientReferenceNoteEQ applies the EQ predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteNEQ applies the NEQ predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteIn applies the In predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldRecipientReferenceNote, vs...))
}

// RecipientReferenceNoteNotIn applies the NotIn predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldRecipientReferenceNote, vs...))
}

// RecipientReferenceNoteGT applies the GT predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteGTE applies the GTE predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteLT applies the LT predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteLTE applies the LTE predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteContains applies the Contains predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteHasPrefix applies the HasPrefix predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteHasSuffix applies the HasSuffix predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteIsNil applies the IsNil predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteIsNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldIsNull(FieldRecipientReferenceNote))
}

// RecipientReferenceNoteNotNil applies the NotNil predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteNotNil() predicate.Ledger {
	return predicate.Ledger(sql.FieldNotNull(FieldRecipientReferenceNote))
}

// RecipientReferenceNoteEqualFold applies the EqualFold predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldRecipientReferenceNote, v))
}

// RecipientReferenceNoteContainsFold applies the ContainsFold predicate on the "recipient_reference_note" field.
func RecipientReferenceNoteContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldRecipientReferenceNote, v))
}

// TransactionTypeEQ applies the EQ predicate on the "transaction_type" field.
func TransactionTypeEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldTransactionType, v))
}

// TransactionTypeNEQ applies the NEQ predicate on the "transaction_type" field.
func TransactionTypeNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldTransactionType, v))
}

// TransactionTypeIn applies the In predicate on the "transaction_type" field.
func TransactionTypeIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldTransactionType, vs...))
}

// TransactionTypeNotIn applies the NotIn predicate on the "transaction_type" field.
func TransactionTypeNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldTransactionType, vs...))
}

// TransactionTypeGT applies the GT predicate on the "transaction_type" field.
func TransactionTypeGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldTransactionType, v))
}

// TransactionTypeGTE applies the GTE predicate on the "transaction_type" field.
func TransactionTypeGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldTransactionType, v))
}

// TransactionTypeLT applies the LT predicate on the "transaction_type" field.
func TransactionTypeLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldTransactionType, v))
}

// TransactionTypeLTE applies the LTE predicate on the "transaction_type" field.
func TransactionTypeLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldTransactionType, v))
}

// TransactionTypeContains applies the Contains predicate on the "transaction_type" field.
func TransactionTypeContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldTransactionType, v))
}

// TransactionTypeHasPrefix applies the HasPrefix predicate on the "transaction_type" field.
func TransactionTypeHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldTransactionType, v))
}

// TransactionTypeHasSuffix applies the HasSuffix predicate on the "transaction_type" field.
func TransactionTypeHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldTransactionType, v))
}

// TransactionTypeEqualFold applies the EqualFold predicate on the "transaction_type" field.
func TransactionTypeEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldTransactionType, v))
}

// TransactionTypeContainsFold applies the ContainsFold predicate on the "transaction_type" field.
func TransactionTypeContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldTransactionType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWallet applies the HasEdge predicate on the "wallet" edge.
func HasWallet() predicate.Ledger {
	return predicate.Ledger(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WalletTable, WalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletWith applies the HasEdge predicate on the "wallet" edge with a given conditions (other predicates).
func HasWalletWith(preds ...predicate.Wallet) predicate.Ledger {
	return predicate.Ledger(func(s *sql.Selector) {
		step := newWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.NotPredicates(p))
}
