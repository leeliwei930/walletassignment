// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldDecimalPlaces holds the string denoting the decimal_places field in the database.
	FieldDecimalPlaces = "decimal_places"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeLedgers holds the string denoting the ledgers edge name in mutations.
	EdgeLedgers = "ledgers"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "wallets"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// LedgersTable is the table that holds the ledgers relation/edge.
	LedgersTable = "ledgers"
	// LedgersInverseTable is the table name for the Ledger entity.
	// It exists in this package in order to avoid circular dependency with the "ledger" package.
	LedgersInverseTable = "ledgers"
	// LedgersColumn is the table column denoting the ledgers relation/edge.
	LedgersColumn = "wallet_id"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldBalance,
	FieldCurrencyCode,
	FieldDecimalPlaces,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance int
	// DefaultCurrencyCode holds the default value on creation for the "currency_code" field.
	DefaultCurrencyCode string
	// DefaultDecimalPlaces holds the default value on creation for the "decimal_places" field.
	DefaultDecimalPlaces int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Wallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByDecimalPlaces orders the results by the decimal_places field.
func ByDecimalPlaces(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDecimalPlaces, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByLedgersCount orders the results by ledgers count.
func ByLedgersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLedgersStep(), opts...)
	}
}

// ByLedgers orders the results by ledgers terms.
func ByLedgers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLedgersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newLedgersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LedgersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LedgersTable, LedgersColumn),
	)
}
