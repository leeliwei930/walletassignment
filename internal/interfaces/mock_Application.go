// Code generated by mockery v2.43.0. DO NOT EDIT.

package interfaces

import (
	clock "code.cloudfoundry.org/clock"
	config "github.com/leeliwei930/walletassignment/config"
	ent "github.com/leeliwei930/walletassignment/ent"

	mock "github.com/stretchr/testify/mock"

	servicesinterfaces "github.com/leeliwei930/walletassignment/internal/app/services/interfaces"

	sql "database/sql"

	testing "testing"

	validator "github.com/go-playground/validator/v10"

	zap "go.uber.org/zap"
)

// MockApplication is an autogenerated mock type for the Application type
type MockApplication struct {
	mock.Mock
}

type MockApplication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApplication) EXPECT() *MockApplication_Expecter {
	return &MockApplication_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockApplication) Close() {
	_m.Called()
}

// MockApplication_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockApplication_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockApplication_Expecter) Close() *MockApplication_Close_Call {
	return &MockApplication_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockApplication_Close_Call) Run(run func()) *MockApplication_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_Close_Call) Return() *MockApplication_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Close_Call) RunAndReturn(run func()) *MockApplication_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetClock provides a mock function with given fields:
func (_m *MockApplication) GetClock() clock.Clock {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClock")
	}

	var r0 clock.Clock
	if rf, ok := ret.Get(0).(func() clock.Clock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clock.Clock)
		}
	}

	return r0
}

// MockApplication_GetClock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClock'
type MockApplication_GetClock_Call struct {
	*mock.Call
}

// GetClock is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetClock() *MockApplication_GetClock_Call {
	return &MockApplication_GetClock_Call{Call: _e.mock.On("GetClock")}
}

func (_c *MockApplication_GetClock_Call) Run(run func()) *MockApplication_GetClock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetClock_Call) Return(_a0 clock.Clock) *MockApplication_GetClock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetClock_Call) RunAndReturn(run func() clock.Clock) *MockApplication_GetClock_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *MockApplication) GetConfig() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// MockApplication_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockApplication_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetConfig() *MockApplication_GetConfig_Call {
	return &MockApplication_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockApplication_GetConfig_Call) Run(run func()) *MockApplication_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetConfig_Call) Return(_a0 *config.Config) *MockApplication_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetConfig_Call) RunAndReturn(run func() *config.Config) *MockApplication_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *MockApplication) GetDB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// MockApplication_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockApplication_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetDB() *MockApplication_GetDB_Call {
	return &MockApplication_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *MockApplication_GetDB_Call) Run(run func()) *MockApplication_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetDB_Call) Return(_a0 *sql.DB) *MockApplication_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetDB_Call) RunAndReturn(run func() *sql.DB) *MockApplication_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDBMigrator provides a mock function with given fields:
func (_m *MockApplication) GetDBMigrator() DBMigrator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBMigrator")
	}

	var r0 DBMigrator
	if rf, ok := ret.Get(0).(func() DBMigrator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBMigrator)
		}
	}

	return r0
}

// MockApplication_GetDBMigrator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBMigrator'
type MockApplication_GetDBMigrator_Call struct {
	*mock.Call
}

// GetDBMigrator is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetDBMigrator() *MockApplication_GetDBMigrator_Call {
	return &MockApplication_GetDBMigrator_Call{Call: _e.mock.On("GetDBMigrator")}
}

func (_c *MockApplication_GetDBMigrator_Call) Run(run func()) *MockApplication_GetDBMigrator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetDBMigrator_Call) Return(_a0 DBMigrator) *MockApplication_GetDBMigrator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetDBMigrator_Call) RunAndReturn(run func() DBMigrator) *MockApplication_GetDBMigrator_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnt provides a mock function with given fields:
func (_m *MockApplication) GetEnt() *ent.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnt")
	}

	var r0 *ent.Client
	if rf, ok := ret.Get(0).(func() *ent.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Client)
		}
	}

	return r0
}

// MockApplication_GetEnt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnt'
type MockApplication_GetEnt_Call struct {
	*mock.Call
}

// GetEnt is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetEnt() *MockApplication_GetEnt_Call {
	return &MockApplication_GetEnt_Call{Call: _e.mock.On("GetEnt")}
}

func (_c *MockApplication_GetEnt_Call) Run(run func()) *MockApplication_GetEnt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetEnt_Call) Return(_a0 *ent.Client) *MockApplication_GetEnt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetEnt_Call) RunAndReturn(run func() *ent.Client) *MockApplication_GetEnt_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocale provides a mock function with given fields:
func (_m *MockApplication) GetLocale() Locale {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocale")
	}

	var r0 Locale
	if rf, ok := ret.Get(0).(func() Locale); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Locale)
		}
	}

	return r0
}

// MockApplication_GetLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocale'
type MockApplication_GetLocale_Call struct {
	*mock.Call
}

// GetLocale is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetLocale() *MockApplication_GetLocale_Call {
	return &MockApplication_GetLocale_Call{Call: _e.mock.On("GetLocale")}
}

func (_c *MockApplication_GetLocale_Call) Run(run func()) *MockApplication_GetLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetLocale_Call) Return(_a0 Locale) *MockApplication_GetLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetLocale_Call) RunAndReturn(run func() Locale) *MockApplication_GetLocale_Call {
	_c.Call.Return(run)
	return _c
}

// GetLog provides a mock function with given fields:
func (_m *MockApplication) GetLog() *zap.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLog")
	}

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// MockApplication_GetLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLog'
type MockApplication_GetLog_Call struct {
	*mock.Call
}

// GetLog is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetLog() *MockApplication_GetLog_Call {
	return &MockApplication_GetLog_Call{Call: _e.mock.On("GetLog")}
}

func (_c *MockApplication_GetLog_Call) Run(run func()) *MockApplication_GetLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetLog_Call) Return(_a0 *zap.Logger) *MockApplication_GetLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetLog_Call) RunAndReturn(run func() *zap.Logger) *MockApplication_GetLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserService provides a mock function with given fields:
func (_m *MockApplication) GetUserService() servicesinterfaces.UserService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserService")
	}

	var r0 servicesinterfaces.UserService
	if rf, ok := ret.Get(0).(func() servicesinterfaces.UserService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servicesinterfaces.UserService)
		}
	}

	return r0
}

// MockApplication_GetUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserService'
type MockApplication_GetUserService_Call struct {
	*mock.Call
}

// GetUserService is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetUserService() *MockApplication_GetUserService_Call {
	return &MockApplication_GetUserService_Call{Call: _e.mock.On("GetUserService")}
}

func (_c *MockApplication_GetUserService_Call) Run(run func()) *MockApplication_GetUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetUserService_Call) Return(_a0 servicesinterfaces.UserService) *MockApplication_GetUserService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetUserService_Call) RunAndReturn(run func() servicesinterfaces.UserService) *MockApplication_GetUserService_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidator provides a mock function with given fields:
func (_m *MockApplication) GetValidator() *validator.Validate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidator")
	}

	var r0 *validator.Validate
	if rf, ok := ret.Get(0).(func() *validator.Validate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.Validate)
		}
	}

	return r0
}

// MockApplication_GetValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidator'
type MockApplication_GetValidator_Call struct {
	*mock.Call
}

// GetValidator is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetValidator() *MockApplication_GetValidator_Call {
	return &MockApplication_GetValidator_Call{Call: _e.mock.On("GetValidator")}
}

func (_c *MockApplication_GetValidator_Call) Run(run func()) *MockApplication_GetValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetValidator_Call) Return(_a0 *validator.Validate) *MockApplication_GetValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetValidator_Call) RunAndReturn(run func() *validator.Validate) *MockApplication_GetValidator_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletService provides a mock function with given fields:
func (_m *MockApplication) GetWalletService() servicesinterfaces.WalletService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWalletService")
	}

	var r0 servicesinterfaces.WalletService
	if rf, ok := ret.Get(0).(func() servicesinterfaces.WalletService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servicesinterfaces.WalletService)
		}
	}

	return r0
}

// MockApplication_GetWalletService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletService'
type MockApplication_GetWalletService_Call struct {
	*mock.Call
}

// GetWalletService is a helper method to define mock.On call
func (_e *MockApplication_Expecter) GetWalletService() *MockApplication_GetWalletService_Call {
	return &MockApplication_GetWalletService_Call{Call: _e.mock.On("GetWalletService")}
}

func (_c *MockApplication_GetWalletService_Call) Run(run func()) *MockApplication_GetWalletService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_GetWalletService_Call) Return(_a0 servicesinterfaces.WalletService) *MockApplication_GetWalletService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_GetWalletService_Call) RunAndReturn(run func() servicesinterfaces.WalletService) *MockApplication_GetWalletService_Call {
	_c.Call.Return(run)
	return _c
}

// UseRefreshDB provides a mock function with given fields: t, fn
func (_m *MockApplication) UseRefreshDB(t *testing.T, fn func()) error {
	ret := _m.Called(t, fn)

	if len(ret) == 0 {
		panic("no return value specified for UseRefreshDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*testing.T, func()) error); ok {
		r0 = rf(t, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplication_UseRefreshDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseRefreshDB'
type MockApplication_UseRefreshDB_Call struct {
	*mock.Call
}

// UseRefreshDB is a helper method to define mock.On call
//   - t *testing.T
//   - fn func()
func (_e *MockApplication_Expecter) UseRefreshDB(t interface{}, fn interface{}) *MockApplication_UseRefreshDB_Call {
	return &MockApplication_UseRefreshDB_Call{Call: _e.mock.On("UseRefreshDB", t, fn)}
}

func (_c *MockApplication_UseRefreshDB_Call) Run(run func(t *testing.T, fn func())) *MockApplication_UseRefreshDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*testing.T), args[1].(func()))
	})
	return _c
}

func (_c *MockApplication_UseRefreshDB_Call) Return(_a0 error) *MockApplication_UseRefreshDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_UseRefreshDB_Call) RunAndReturn(run func(*testing.T, func()) error) *MockApplication_UseRefreshDB_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApplication creates a new instance of MockApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplication {
	mock := &MockApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
