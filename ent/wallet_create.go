// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/leeliwei930/walletassignment/ent/ledger"
	"github.com/leeliwei930/walletassignment/ent/user"
	"github.com/leeliwei930/walletassignment/ent/wallet"
)

// WalletCreate is the builder for creating a Wallet entity.
type WalletCreate struct {
	config
	mutation *WalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (wc *WalletCreate) SetUserID(u uuid.UUID) *WalletCreate {
	wc.mutation.SetUserID(u)
	return wc
}

// SetBalance sets the "balance" field.
func (wc *WalletCreate) SetBalance(i int) *WalletCreate {
	wc.mutation.SetBalance(i)
	return wc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wc *WalletCreate) SetNillableBalance(i *int) *WalletCreate {
	if i != nil {
		wc.SetBalance(*i)
	}
	return wc
}

// SetCurrencyCode sets the "currency_code" field.
func (wc *WalletCreate) SetCurrencyCode(s string) *WalletCreate {
	wc.mutation.SetCurrencyCode(s)
	return wc
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCurrencyCode(s *string) *WalletCreate {
	if s != nil {
		wc.SetCurrencyCode(*s)
	}
	return wc
}

// SetDecimalPlaces sets the "decimal_places" field.
func (wc *WalletCreate) SetDecimalPlaces(i int) *WalletCreate {
	wc.mutation.SetDecimalPlaces(i)
	return wc
}

// SetNillableDecimalPlaces sets the "decimal_places" field if the given value is not nil.
func (wc *WalletCreate) SetNillableDecimalPlaces(i *int) *WalletCreate {
	if i != nil {
		wc.SetDecimalPlaces(*i)
	}
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WalletCreate) SetCreatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCreatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WalletCreate) SetUpdatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUpdatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WalletCreate) SetID(u uuid.UUID) *WalletCreate {
	wc.mutation.SetID(u)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableID(u *uuid.UUID) *WalletCreate {
	if u != nil {
		wc.SetID(*u)
	}
	return wc
}

// SetUser sets the "user" edge to the User entity.
func (wc *WalletCreate) SetUser(u *User) *WalletCreate {
	return wc.SetUserID(u.ID)
}

// AddLedgerIDs adds the "ledgers" edge to the Ledger entity by IDs.
func (wc *WalletCreate) AddLedgerIDs(ids ...uuid.UUID) *WalletCreate {
	wc.mutation.AddLedgerIDs(ids...)
	return wc
}

// AddLedgers adds the "ledgers" edges to the Ledger entity.
func (wc *WalletCreate) AddLedgers(l ...*Ledger) *WalletCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wc.AddLedgerIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wc *WalletCreate) Mutation() *WalletMutation {
	return wc.mutation
}

// Save creates the Wallet in the database.
func (wc *WalletCreate) Save(ctx context.Context) (*Wallet, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WalletCreate) SaveX(ctx context.Context) *Wallet {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WalletCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WalletCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WalletCreate) defaults() {
	if _, ok := wc.mutation.Balance(); !ok {
		v := wallet.DefaultBalance
		wc.mutation.SetBalance(v)
	}
	if _, ok := wc.mutation.CurrencyCode(); !ok {
		v := wallet.DefaultCurrencyCode
		wc.mutation.SetCurrencyCode(v)
	}
	if _, ok := wc.mutation.DecimalPlaces(); !ok {
		v := wallet.DefaultDecimalPlaces
		wc.mutation.SetDecimalPlaces(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := wallet.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := wallet.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := wallet.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WalletCreate) check() error {
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Wallet.user_id"`)}
	}
	if _, ok := wc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Wallet.balance"`)}
	}
	if _, ok := wc.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "Wallet.currency_code"`)}
	}
	if _, ok := wc.mutation.DecimalPlaces(); !ok {
		return &ValidationError{Name: "decimal_places", err: errors.New(`ent: missing required field "Wallet.decimal_places"`)}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Wallet.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Wallet.updated_at"`)}
	}
	if len(wc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Wallet.user"`)}
	}
	return nil
}

func (wc *WalletCreate) sqlSave(ctx context.Context) (*Wallet, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WalletCreate) createSpec() (*Wallet, *sqlgraph.CreateSpec) {
	var (
		_node = &Wallet{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(wallet.Table, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeInt, value)
		_node.Balance = value
	}
	if value, ok := wc.mutation.CurrencyCode(); ok {
		_spec.SetField(wallet.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = value
	}
	if value, ok := wc.mutation.DecimalPlaces(); ok {
		_spec.SetField(wallet.FieldDecimalPlaces, field.TypeInt, value)
		_node.DecimalPlaces = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(wallet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.LedgersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.LedgersTable,
			Columns: []string{wallet.LedgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Wallet.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (wc *WalletCreate) OnConflict(opts ...sql.ConflictOption) *WalletUpsertOne {
	wc.conflict = opts
	return &WalletUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WalletCreate) OnConflictColumns(columns ...string) *WalletUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WalletUpsertOne{
		create: wc,
	}
}

type (
	// WalletUpsertOne is the builder for "upsert"-ing
	//  one Wallet node.
	WalletUpsertOne struct {
		create *WalletCreate
	}

	// WalletUpsert is the "OnConflict" setter.
	WalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *WalletUpsert) SetUserID(v uuid.UUID) *WalletUpsert {
	u.Set(wallet.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsert) UpdateUserID() *WalletUpsert {
	u.SetExcluded(wallet.FieldUserID)
	return u
}

// SetBalance sets the "balance" field.
func (u *WalletUpsert) SetBalance(v int) *WalletUpsert {
	u.Set(wallet.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *WalletUpsert) UpdateBalance() *WalletUpsert {
	u.SetExcluded(wallet.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *WalletUpsert) AddBalance(v int) *WalletUpsert {
	u.Add(wallet.FieldBalance, v)
	return u
}

// SetCurrencyCode sets the "currency_code" field.
func (u *WalletUpsert) SetCurrencyCode(v string) *WalletUpsert {
	u.Set(wallet.FieldCurrencyCode, v)
	return u
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *WalletUpsert) UpdateCurrencyCode() *WalletUpsert {
	u.SetExcluded(wallet.FieldCurrencyCode)
	return u
}

// SetDecimalPlaces sets the "decimal_places" field.
func (u *WalletUpsert) SetDecimalPlaces(v int) *WalletUpsert {
	u.Set(wallet.FieldDecimalPlaces, v)
	return u
}

// UpdateDecimalPlaces sets the "decimal_places" field to the value that was provided on create.
func (u *WalletUpsert) UpdateDecimalPlaces() *WalletUpsert {
	u.SetExcluded(wallet.FieldDecimalPlaces)
	return u
}

// AddDecimalPlaces adds v to the "decimal_places" field.
func (u *WalletUpsert) AddDecimalPlaces(v int) *WalletUpsert {
	u.Add(wallet.FieldDecimalPlaces, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WalletUpsert) SetCreatedAt(v time.Time) *WalletUpsert {
	u.Set(wallet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WalletUpsert) UpdateCreatedAt() *WalletUpsert {
	u.SetExcluded(wallet.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsert) SetUpdatedAt(v time.Time) *WalletUpsert {
	u.Set(wallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsert) UpdateUpdatedAt() *WalletUpsert {
	u.SetExcluded(wallet.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WalletUpsertOne) UpdateNewValues() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(wallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WalletUpsertOne) Ignore() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletUpsertOne) DoNothing() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletCreate.OnConflict
// documentation for more info.
func (u *WalletUpsertOne) Update(set func(*WalletUpsert)) *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *WalletUpsertOne) SetUserID(v uuid.UUID) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateUserID() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUserID()
	})
}

// SetBalance sets the "balance" field.
func (u *WalletUpsertOne) SetBalance(v int) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *WalletUpsertOne) AddBalance(v int) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateBalance() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *WalletUpsertOne) SetCurrencyCode(v string) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateCurrencyCode() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetDecimalPlaces sets the "decimal_places" field.
func (u *WalletUpsertOne) SetDecimalPlaces(v int) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetDecimalPlaces(v)
	})
}

// AddDecimalPlaces adds v to the "decimal_places" field.
func (u *WalletUpsertOne) AddDecimalPlaces(v int) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddDecimalPlaces(v)
	})
}

// UpdateDecimalPlaces sets the "decimal_places" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateDecimalPlaces() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateDecimalPlaces()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WalletUpsertOne) SetCreatedAt(v time.Time) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateCreatedAt() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsertOne) SetUpdatedAt(v time.Time) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateUpdatedAt() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WalletUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WalletUpsertOne.ID is not supported by MySQL driver. Use WalletUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WalletUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WalletCreateBulk is the builder for creating many Wallet entities in bulk.
type WalletCreateBulk struct {
	config
	err      error
	builders []*WalletCreate
	conflict []sql.ConflictOption
}

// Save creates the Wallet entities in the database.
func (wcb *WalletCreateBulk) Save(ctx context.Context) ([]*Wallet, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wallet, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WalletCreateBulk) SaveX(ctx context.Context) []*Wallet {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WalletCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WalletCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Wallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (wcb *WalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *WalletUpsertBulk {
	wcb.conflict = opts
	return &WalletUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WalletCreateBulk) OnConflictColumns(columns ...string) *WalletUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WalletUpsertBulk{
		create: wcb,
	}
}

// WalletUpsertBulk is the builder for "upsert"-ing
// a bulk of Wallet nodes.
type WalletUpsertBulk struct {
	create *WalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WalletUpsertBulk) UpdateNewValues() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(wallet.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WalletUpsertBulk) Ignore() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletUpsertBulk) DoNothing() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletCreateBulk.OnConflict
// documentation for more info.
func (u *WalletUpsertBulk) Update(set func(*WalletUpsert)) *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *WalletUpsertBulk) SetUserID(v uuid.UUID) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateUserID() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUserID()
	})
}

// SetBalance sets the "balance" field.
func (u *WalletUpsertBulk) SetBalance(v int) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *WalletUpsertBulk) AddBalance(v int) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateBalance() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *WalletUpsertBulk) SetCurrencyCode(v string) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateCurrencyCode() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetDecimalPlaces sets the "decimal_places" field.
func (u *WalletUpsertBulk) SetDecimalPlaces(v int) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetDecimalPlaces(v)
	})
}

// AddDecimalPlaces adds v to the "decimal_places" field.
func (u *WalletUpsertBulk) AddDecimalPlaces(v int) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddDecimalPlaces(v)
	})
}

// UpdateDecimalPlaces sets the "decimal_places" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateDecimalPlaces() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateDecimalPlaces()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WalletUpsertBulk) SetCreatedAt(v time.Time) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateCreatedAt() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsertBulk) SetUpdatedAt(v time.Time) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateUpdatedAt() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WalletUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
